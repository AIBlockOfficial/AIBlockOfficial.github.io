"use strict";(self.webpackChunkaiblock_dev=self.webpackChunkaiblock_dev||[]).push([[3002],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>u});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),y=c(n),g=r,u=y["".concat(s,".").concat(g)]||y[g]||d[g]||i;return n?a.createElement(u,l(l({ref:t},p),{},{components:n})):a.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[y]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},92494:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(58168),r=(n(96540),n(15680));const i={title:"Get Started",description:"Get started setting up your AIBlock wallet through the A-Block.js SDK",sidebar_label:"Get Started",sidebar_position:0,hide_title:!0,tags:["A-Block.js","getting started"]},l="Get Started",o={unversionedId:"ablockjs-tutorials/get-started",id:"ablockjs-tutorials/get-started",title:"Get Started",description:"Get started setting up your AIBlock wallet through the A-Block.js SDK",source:"@site/docs/ablockjs-tutorials/get-started.mdx",sourceDirName:"ablockjs-tutorials",slug:"/ablockjs-tutorials/get-started",permalink:"/docs/ablockjs-tutorials/get-started",draft:!1,tags:[{label:"A-Block.js",permalink:"/docs/tags/a-block-js"},{label:"getting started",permalink:"/docs/tags/getting-started"}],version:"current",sidebarPosition:0,frontMatter:{title:"Get Started",description:"Get started setting up your AIBlock wallet through the A-Block.js SDK",sidebar_label:"Get Started",sidebar_position:0,hide_title:!0,tags:["A-Block.js","getting started"]},sidebar:"docsSidebar",previous:{title:"A-Block.js Tutorials",permalink:"/docs/ablockjs-tutorials"},next:{title:"Send and Receive Payments",permalink:"/docs/ablockjs-tutorials/send-and-receive"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Create AIBlock Wallet",id:"create-aiblock-wallet",level:2},{value:"Create a New Wallet",id:"create-a-new-wallet",level:3},{value:"Generate an Existing Wallet",id:"generate-an-existing-wallet",level:3},{value:"<code>fromMasterKey</code>",id:"frommasterkey",level:4},{value:"<code>fromSeed</code>",id:"fromseed",level:4},{value:"Offline Initialization",id:"offline-initialization",level:3},{value:"User-defined Methods",id:"user-defined-methods",level:3},{value:"Working with the Wallet",id:"working-with-the-wallet",level:2},{value:"Generating Keypairs",id:"generating-keypairs",level:3},{value:"Fetch Balance",id:"fetch-balance",level:3}],p={toc:c},y="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(y,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"get-started"},"Get Started"),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)("p",null,"Integration wih AIBlock can be done simply and easily through the ",(0,r.yg)("a",{href:"https://github.com/AIBlockOfficial/A-Block.js#a-blockjs"},"A-Block.js SDK"),".\nTo get started, we can install it to our JavaScript/TypeScript project with ",(0,r.yg)("inlineCode",{parentName:"p"},"npm"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"npm install @ablock/a-blockjs\n")),(0,r.yg)("p",null,"or alternatively with ",(0,r.yg)("inlineCode",{parentName:"p"},"yarn"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"yarn add @ablock/a-blockjs\n")),(0,r.yg)("br",null),(0,r.yg)("br",null),(0,r.yg)("h2",{id:"create-aiblock-wallet"},"Create AIBlock Wallet"),(0,r.yg)("p",null,"Creating an instance of an AIBlock wallet can be done in three main ways:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"initNew"),": A new wallet, created from scratch for a new user"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"fromSeed"),": An existing wallet, generated from a saved seed phrase"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"fromMasterKey"),": An existing wallet, generated from a saved master key")),(0,r.yg)("br",null),(0,r.yg)("br",null),(0,r.yg)("h3",{id:"create-a-new-wallet"},"Create a New Wallet"),(0,r.yg)("p",null,"You can create a new instance of an AIBlock wallet via the SDK's ",(0,r.yg)("inlineCode",{parentName:"p"},"initNew")," method:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"    import { ABlockWallet } from '@ablock/a-blockjs';\n\n    const CONFIG = {\n      mempoolHost: 'example.mempool.host.com',\n      passphrase: 'a secure passphrase',\n    /* Optional, subject to certain requests not being usable.\n      storageHost: example.storage.host.com;\n      intercomHost: example.intercom.host.com;\n    */\n    };\n\n    // Create the wallet object\n    const wallet = new ABlockWallet();\n\n    // Initialize the wallet with the needed configuration\n    // NOTE: This is an async call\n    wallet\n    .initNew(CONFIG)\n    .then((initResult) => {\n      const [seedPhrase, masterKeyEncrypted] = initResult.content.initNewResponse;\n\n      // Display the seed phrase to the user for safe keeping\n      display(seedPhrase);\n\n      // Store the encrypted master key safely\n      saveMasterKey(masterKeyEncrypted);\n    });\n")),(0,r.yg)("p",null,"This method needs a few parameters to be specified:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"mempoolHost")),": The IP or domain of the mempool node you want to connect to. You'll need this to send and receive transactions from the chain ",(0,r.yg)("strong",{parentName:"li"}," *required ")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"storageHost"),": The IP or domain of the storage node you want to connect to. You'll need this to make transactions on the network"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"intercomHost"),": The IP or domain of an intercom node you want to connect to. You'll need this if you want to make any 2-way transactions with other people/wallets"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"passphrase")),": The passphrase to encrypt your wallet's keypair/s. Make sure this is a super secure value ",(0,r.yg)("strong",{parentName:"li"}," *required "))),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"initNew")," method is async, so you'll need to use a ",(0,r.yg)("inlineCode",{parentName:"p"},".then")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"await")," the result in order to get the wallet's seed phrase, for example.\nOnce you have a seed phrase, you can always re-initialize the same wallet using that same seed phrase."),(0,r.yg)("br",null),(0,r.yg)("br",null),(0,r.yg)("h3",{id:"generate-an-existing-wallet"},"Generate an Existing Wallet"),(0,r.yg)("p",null,"If you have an existing seed phrase and want to generate a wallet from it, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"fromMasterKey")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"fromSeed")," methods:"),(0,r.yg)("h4",{id:"frommasterkey"},(0,r.yg)("inlineCode",{parentName:"h4"},"fromMasterKey")),(0,r.yg)("p",null,"When a master key already exists, this type of initialization ",(0,r.yg)("strong",{parentName:"p"},"should")," be used. This typically occurs when the wallet has been initialized previously using ",(0,r.yg)("inlineCode",{parentName:"p"},"initNew")," and the encrypted master key has been stored safely. Using an existing master key will ensure that BIP39 keypair derivation is consistent. This type of initialization does not have a return value."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"// Initialize the wallet with the needed configuration\nwallet.fromMasterKey(masterKey, CONFIG);\n")),(0,r.yg)("h4",{id:"fromseed"},(0,r.yg)("inlineCode",{parentName:"h4"},"fromSeed")),(0,r.yg)("p",null,"Initialization of the wallet through the use of an existing seed phrase may happen for one of two reasons:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"The user has lost their keypairs and re-generation is needed by providing the seed phrase."),(0,r.yg)("li",{parentName:"ol"},"A valid seed phrase has been pre-generated due to specific UX design constraints and needs to be used to initialize the wallet.")),(0,r.yg)("p",null,"This type of initialization will return the corresponding master key (in an encrypted format) which was created using the provided seed phrase. This master key needs to be stored safely in the same manner as initialization using ",(0,r.yg)("inlineCode",{parentName:"p"},"initNew"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"const sp = 'existing seed phrase';\n// Initialize the wallet with the needed configuration\nwallet.fromSeed(sp, CONFIG).then((fromSeedResult) => {\n\n  const masterKeyEncrypted = fromSeedResult.content.fromSeedResponse;\n\n  // Store the encrypted master key safely\n  saveMasterKey(masterKeyEncrypted);\n});\n")),(0,r.yg)("br",null),(0,r.yg)("br",null),(0,r.yg)("h3",{id:"offline-initialization"},"Offline Initialization"),(0,r.yg)("p",null,"In some cases, it might be desirable to initialize the wallet without a network connection. This will allow the wallet to be used offline, but will inadvertently prevent the wallet from being able to perform any operations that require interaction with the AIBlock network. The following functions are available with an offline configuration:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"regenAddresses")," - Re-generate lost keypairs from a list of given addresses."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"getNewKeypair")," - Generate a new keypair."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"getSeedPhrase")," - Get the existing seed phrase from memory (requires initialization from seed phrase)."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"getMasterKey")," - Get the existing master key from memory.")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Offline Initialization"),(0,r.yg)("br",null),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { ABlockWallet } from '@ablock/a-blockjs';\n\n// Create the wallet object\nconst wallet = new ABlockWallet();\n\n// Initialize the wallet with the needed configuration\nconst initResult = wallet.initNew({passphrase: 'a secure passphrase'}, true).then((initResult) => {\n    const [seedPhrase, masterKeyEncrypted] = initResult.content.initNewResponse;\n\n    // Display the seed phrase to the user for safe keeping\n    display(seedPhrase);\n\n    // Store the encrypted master key safely\n    saveMasterKey(masterKeyEncrypted);\n});\n\n// Configuration\nconst config = {\n  mempoolHost: 'example.mempool.host.com',\n  storageHost: 'example.storage.host.com';\n  intercomHost: 'example.intercom.host.com';\n  notaryHost: 'example.notary.host.com';\n};\n\n// Initialize network configuration when required\nconst initNetworkResult = wallet.initNetwork(config);\n"))),(0,r.yg)("br",null),(0,r.yg)("br",null),(0,r.yg)("h3",{id:"user-defined-methods"},"User-defined Methods"),(0,r.yg)("p",null,"Many methods will either ",(0,r.yg)("strong",{parentName:"p"},"require")," or ",(0,r.yg)("strong",{parentName:"p"},"return")," different types of data depending on the operation. It is entirely up to the developer to store and retrieve data safely."),(0,r.yg)("details",null,(0,r.yg)("summary",null,"User-defined Methods"),(0,r.yg)("br",null),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"  function saveMasterKey(masterKeyEncrypter: IMasterKeyEncrypted): void {\n    // Write your I/O operations here to safely store the encrypted master key\n    ...\n  }\n\n  function getMasterKey(): IMasterKeyEncrypted {\n    // Write your I/O operations here to safely retrieve\n    // the encrypted master key\n    ...\n  }\n\n  function saveKeypair(keyPair: IKeyPairEncrypted): void {\n    // Write your I/O operations here to safely store the key pair\n    ...\n  }\n\n  function getKeypairs(): IKeyPairEncrypted[] {\n    // Write your I/O operations here to safely retrieve\n    // the encrypted key pairs\n    ...\n  }\n\n  function getAllEncryptedTxs(): ICreateTransactionEncrypted[] {\n    // Write your I/O operations here to get all encrypted\n    // transactions\n    ...\n  }\n\n  function saveEncryptedTx(druid: string, encryptedTx: ICreateTransactionEncrypted): void {\n    // Write your I/O operations here to save the encrypted transaction\n    // with its corresponding DRUID value in a key-value format\n    ...\n  }\n\n"))),(0,r.yg)("br",null),(0,r.yg)("h2",{id:"working-with-the-wallet"},"Working with the Wallet"),(0,r.yg)("p",null,"Once initialized, you can access all the functionalities within the wallet. "),(0,r.yg)("h3",{id:"generating-keypairs"},"Generating Keypairs"),(0,r.yg)("p",null,"AIBlock is a UTXO blockchain, so you can generate a new keypair, for example, by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"getNewKeypair")," method:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"import { ABlockWallet } from '@ablock/a-blockjs';\n\nconst wallet = new ABlockWallet();\n\n// ... Initialize the wallet correctly\n\n// The array argument can contain existing keypairs to be used\nconst newKeypairResult = wallet.getNewKeypair([]);\n\n// Final keypair\nconst newKeypair: IKeypairEncrypted = newKeypairResult.content.newKeypairResponse;\n")),(0,r.yg)("h3",{id:"fetch-balance"},"Fetch Balance"),(0,r.yg)("p",null,"You can then do a number of things with the keypair, for example getting the address associated with that keypair and\nfetching its balance:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"//... newKeypair initialized\n\n// Get the associated address\nconst address = newKeypair.address;\n\n// You can now fetch the balance for the address from the chain\nconst balanceResult = await wallet.fetchBalance([address]);\nconst balance = balanceResult.content.fetchBalanceResponse;\n")),(0,r.yg)("p",null,"You can find the rest of the associated functions for your wallet in the SDK's README, but this should give you a good point to\nstart from. Next, we'll see how to send and receive payments with the new wallet."))}d.isMDXComponent=!0}}]);