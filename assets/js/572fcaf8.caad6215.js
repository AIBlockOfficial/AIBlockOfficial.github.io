"use strict";(self.webpackChunkaiblock_dev=self.webpackChunkaiblock_dev||[]).push([[7457],{73422:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>y,contentTitle:()=>h,default:()=>k,frontMatter:()=>m,metadata:()=>u,toc:()=>g});var n=a(58168),o=(a(96540),a(15680)),s=a(54754),i=a(34366),r=a(13185),l=a(26612),c=a(30774),p=a(47335),d=(a(38454),a(19365));const m={id:"blockchain-entry",title:"blockchain_entry",description:"Fetches a block or transaction from the chain.",sidebar_label:"blockchain_entry",hide_title:!0,hide_table_of_contents:!0,api:{tags:["block"],description:"Fetches a block or transaction from the chain.",operationId:"blockchainEntry",requestBody:{description:"The hash of the block or transaction to fetch",content:{"application/json":{schema:{type:"string",example:"ga0e7a2ff46a4a9c9775118db6de61ec"}}},required:!0},parameters:[{in:"header",name:"x-cache-id",required:!0,description:"An idempotent key for retrieving cached responses from the node",schema:{type:"string",example:"afac3a3dd8a04538934db1c20cc29767",pattern:"^[a-z0-9]{32}$"}}],responses:{200:{description:"Successful operation",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:"45v340cd2f8c4782a5b058832565afb1",description:"The ID of the call, which corresponds to the x-cache-id used in the header"},status:{type:"string",example:"Success",description:'The status of the call, which will be one of either "Success", "Error", or "Pending"'},reason:{type:"string",example:"Database item(s) successfully retrieved",description:"The reason for the status of the call. Most useful to debug errors"},route:{type:"string",example:"blockchain_entry",description:"The endpoint route that was called"},content:{type:"object",example:{Transaction:{inputs:[{previous_out:null,script_signature:{stack:[{Num:1585843}]}}],outputs:[{value:{Token:5369041},locktime:1585943,drs_block_hash:null,script_public_key:"0dafb...afdb3"}],version:5,druid_info:null}}}},title:"ResponseBlockchainEntry"}}}},400:{description:"Invalid input",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:null},status:{type:"string",example:"Error"},reason:{type:"string",example:"Bad Request"},route:{type:"string",example:null},content:{type:"string",example:null}},title:"ResponseBadRequest"}}}}},method:"post",path:"/blockchain_entry",servers:[{url:"http://37.27.23.104:3001",description:"Testnet Storage Node"}],jsonRequestBodyExample:"ga0e7a2ff46a4a9c9775118db6de61ec",info:{title:"Storage API",description:"\u26a0\ufe0f **Some sections may still be incomplete. We higly recommend getting started by downloading our [Postman collection](/docs/postman-collections)**.\n\nThe Storage node is responsible for storing the full blockchain history. \nOnce blocks are mined by the miners and sent to the Mempool nodes for validation, they are pushed on to the Storage nodes for long-term storage. \nAnybody is allowed to request a full history of the blockchain from the Storage nodes, but they are not required to keep such a history to participate in the network.",contact:{email:"byron.houwens@a-block.ch"},license:{name:"GPL-3.0",url:"https://www.gnu.org/licenses/gpl-3.0.en.html"},version:"1.0.1"},postman:{name:"blockchain_entry",description:{content:"Fetches a block or transaction from the chain.",type:"text/plain"},url:{path:["blockchain_entry"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{disabled:!1,description:{content:"(Required) An idempotent key for retrieving cached responses from the node",type:"text/plain"},key:"x-cache-id",value:""},{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"docs/api/storage/storage-api",custom_edit_url:null,hide_send_button:!0},h=void 0,u={unversionedId:"api/storage/blockchain-entry",id:"api/storage/blockchain-entry",title:"blockchain_entry",description:"Fetches a block or transaction from the chain.",source:"@site/docs/api/storage/blockchain-entry.api.mdx",sourceDirName:"api/storage",slug:"/api/storage/blockchain-entry",permalink:"/docs/api/storage/blockchain-entry",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"blockchain-entry",title:"blockchain_entry",description:"Fetches a block or transaction from the chain.",sidebar_label:"blockchain_entry",hide_title:!0,hide_table_of_contents:!0,api:{tags:["block"],description:"Fetches a block or transaction from the chain.",operationId:"blockchainEntry",requestBody:{description:"The hash of the block or transaction to fetch",content:{"application/json":{schema:{type:"string",example:"ga0e7a2ff46a4a9c9775118db6de61ec"}}},required:!0},parameters:[{in:"header",name:"x-cache-id",required:!0,description:"An idempotent key for retrieving cached responses from the node",schema:{type:"string",example:"afac3a3dd8a04538934db1c20cc29767",pattern:"^[a-z0-9]{32}$"}}],responses:{200:{description:"Successful operation",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:"45v340cd2f8c4782a5b058832565afb1",description:"The ID of the call, which corresponds to the x-cache-id used in the header"},status:{type:"string",example:"Success",description:'The status of the call, which will be one of either "Success", "Error", or "Pending"'},reason:{type:"string",example:"Database item(s) successfully retrieved",description:"The reason for the status of the call. Most useful to debug errors"},route:{type:"string",example:"blockchain_entry",description:"The endpoint route that was called"},content:{type:"object",example:{Transaction:{inputs:[{previous_out:null,script_signature:{stack:[{Num:1585843}]}}],outputs:[{value:{Token:5369041},locktime:1585943,drs_block_hash:null,script_public_key:"0dafb...afdb3"}],version:5,druid_info:null}}}},title:"ResponseBlockchainEntry"}}}},400:{description:"Invalid input",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:null},status:{type:"string",example:"Error"},reason:{type:"string",example:"Bad Request"},route:{type:"string",example:null},content:{type:"string",example:null}},title:"ResponseBadRequest"}}}}},method:"post",path:"/blockchain_entry",servers:[{url:"http://37.27.23.104:3001",description:"Testnet Storage Node"}],jsonRequestBodyExample:"ga0e7a2ff46a4a9c9775118db6de61ec",info:{title:"Storage API",description:"\u26a0\ufe0f **Some sections may still be incomplete. We higly recommend getting started by downloading our [Postman collection](/docs/postman-collections)**.\n\nThe Storage node is responsible for storing the full blockchain history. \nOnce blocks are mined by the miners and sent to the Mempool nodes for validation, they are pushed on to the Storage nodes for long-term storage. \nAnybody is allowed to request a full history of the blockchain from the Storage nodes, but they are not required to keep such a history to participate in the network.",contact:{email:"byron.houwens@a-block.ch"},license:{name:"GPL-3.0",url:"https://www.gnu.org/licenses/gpl-3.0.en.html"},version:"1.0.1"},postman:{name:"blockchain_entry",description:{content:"Fetches a block or transaction from the chain.",type:"text/plain"},url:{path:["blockchain_entry"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{disabled:!1,description:{content:"(Required) An idempotent key for retrieving cached responses from the node",type:"text/plain"},key:"x-cache-id",value:""},{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"docs/api/storage/storage-api",custom_edit_url:null,hide_send_button:!0},sidebar:"apiSidebar",previous:{title:"block_by_num",permalink:"/docs/api/storage/block-by-num"},next:{title:"Introduction",permalink:"/docs/api/miner/miner-api"}},y={},g=[{value:"blockchain_entry",id:"blockchain_entry",level:2}],b={toc:g},f="wrapper";function k(e){let{components:t,...a}=e;return(0,o.yg)(f,(0,n.A)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"blockchain_entry"},"blockchain_entry"),(0,o.yg)("p",null,"Fetches a block or transaction from the chain."),(0,o.yg)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,o.yg)("summary",{style:{}},(0,o.yg)("strong",null,"Header Parameters")),(0,o.yg)("div",null,(0,o.yg)("ul",null,(0,o.yg)(r.A,{className:"paramsItem",param:{in:"header",name:"x-cache-id",required:!0,description:"An idempotent key for retrieving cached responses from the node",schema:{type:"string",example:"afac3a3dd8a04538934db1c20cc29767",pattern:"^[a-z0-9]{32}$"}},mdxType:"ParamsItem"})))),(0,o.yg)(i.A,{mdxType:"MimeTabs"},(0,o.yg)(d.A,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,o.yg)("details",{style:{},"data-collapsed":!1,open:!0},(0,o.yg)("summary",{style:{textAlign:"left"}},(0,o.yg)("strong",null,"Request Body"),(0,o.yg)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,o.yg)("div",{style:{textAlign:"left",marginLeft:"1rem"}},(0,o.yg)("div",{style:{marginTop:"1rem",marginBottom:"1rem"}},(0,o.yg)("p",null,"The hash of the block or transaction to fetch"))),(0,o.yg)("ul",{style:{marginLeft:"1rem"}},(0,o.yg)("div",{style:{marginTop:".5rem",marginBottom:".5rem",marginLeft:"1rem"}},(0,o.yg)("p",null,"string")))))),(0,o.yg)("div",null,(0,o.yg)(s.A,{mdxType:"ApiTabs"},(0,o.yg)(d.A,{label:"200",value:"200",mdxType:"TabItem"},(0,o.yg)("div",null,(0,o.yg)("p",null,"Successful operation")),(0,o.yg)("div",null,(0,o.yg)(i.A,{schemaType:"response",mdxType:"MimeTabs"},(0,o.yg)(d.A,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,o.yg)(p.A,{mdxType:"SchemaTabs"},(0,o.yg)(d.A,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,o.yg)("details",{style:{},"data-collapsed":!1,open:!0},(0,o.yg)("summary",{style:{textAlign:"left"}},(0,o.yg)("strong",null,"Schema")),(0,o.yg)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,o.yg)("ul",{style:{marginLeft:"1rem"}},(0,o.yg)(c.A,{collapsible:!1,name:"id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"45v340cd2f8c4782a5b058832565afb1",description:"The ID of the call, which corresponds to the x-cache-id used in the header"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"status",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Success",description:'The status of the call, which will be one of either "Success", "Error", or "Pending"'},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"reason",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Database item(s) successfully retrieved",description:"The reason for the status of the call. Most useful to debug errors"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"route",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"blockchain_entry",description:"The endpoint route that was called"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"content",required:!1,schemaName:"object",qualifierMessage:void 0,schema:{type:"object",example:{Transaction:{inputs:[{previous_out:null,script_signature:{stack:[{Num:1585843}]}}],outputs:[{value:{Token:5369041},locktime:1585943,drs_block_hash:null,script_public_key:"0dafb...afdb3"}],version:5,druid_info:null}}},mdxType:"SchemaItem"})))),(0,o.yg)(d.A,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,o.yg)(l.A,{responseExample:'{\n  "id": "45v340cd2f8c4782a5b058832565afb1",\n  "status": "Success",\n  "reason": "Database item(s) successfully retrieved",\n  "route": "blockchain_entry",\n  "content": {\n    "Transaction": {\n      "inputs": [\n        {\n          "previous_out": null,\n          "script_signature": {\n            "stack": [\n              {\n                "Num": 1585843\n              }\n            ]\n          }\n        }\n      ],\n      "outputs": [\n        {\n          "value": {\n            "Token": 5369041\n          },\n          "locktime": 1585943,\n          "drs_block_hash": null,\n          "script_public_key": "0dafb...afdb3"\n        }\n      ],\n      "version": 5,\n      "druid_info": null\n    }\n  }\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,o.yg)(d.A,{label:"400",value:"400",mdxType:"TabItem"},(0,o.yg)("div",null,(0,o.yg)("p",null,"Invalid input")),(0,o.yg)("div",null,(0,o.yg)(i.A,{schemaType:"response",mdxType:"MimeTabs"},(0,o.yg)(d.A,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,o.yg)(p.A,{mdxType:"SchemaTabs"},(0,o.yg)(d.A,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,o.yg)("details",{style:{},"data-collapsed":!1,open:!0},(0,o.yg)("summary",{style:{textAlign:"left"}},(0,o.yg)("strong",null,"Schema")),(0,o.yg)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,o.yg)("ul",{style:{marginLeft:"1rem"}},(0,o.yg)(c.A,{collapsible:!1,name:"id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:null},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"status",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Error"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"reason",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Bad Request"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"route",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:null},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"content",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:null},mdxType:"SchemaItem"})))),(0,o.yg)(d.A,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,o.yg)(l.A,{responseExample:'{\n  "id": null,\n  "status": "Error",\n  "reason": "Bad Request",\n  "route": null,\n  "content": null\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}k.isMDXComponent=!0}}]);