"use strict";(self.webpackChunkaiblock_dev=self.webpackChunkaiblock_dev||[]).push([[6974],{49902:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>h,default:()=>x,frontMatter:()=>d,metadata:()=>y,toc:()=>g});var s=a(58168),n=(a(96540),a(15680)),o=a(54754),l=a(34366),i=a(13185),c=a(26612),r=a(30774),p=a(47335),m=(a(38454),a(19365));const d={id:"fetch-balance",title:"fetch_balance",description:"Fetches the balance/s for 1 or more addresses.",sidebar_label:"fetch_balance",hide_title:!0,hide_table_of_contents:!0,api:{tags:["address"],description:"Fetches the balance/s for 1 or more addresses.",operationId:"fetchBalance",parameters:[{in:"header",name:"x-cache-id",required:!0,description:"An idempotent key for retrieving cached responses from the node",schema:{type:"string",example:"4d1e5754af0931a15138445c3ecd1a82",pattern:"^[a-z0-9]{32}$"}}],requestBody:{description:"List of addresses to fetch the balance from.",content:{"application/json":{schema:{type:"array",description:"list of addresses to fetch from",items:{type:"string",example:"d6fa779a3de8b216c56375018375e490c7e2ce92918abce4caecf73b1f77c38f"},title:"FetchBalance"}}},required:!0},responses:{200:{description:"Successful operation",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:"45v340cd2f8c4782a5b058832565afb1",description:"The ID of the call, which corresponds to the x-cache-id used in the header"},status:{type:"string",example:"Success",description:'The status of the call, which will be one of either "Success", "Error", or "Pending"'},reason:{type:"string",example:"Balance successfully fetched",description:"The reason for the status of the call. Most useful to debug errors"},route:{type:"string",example:"fetch_balance",description:"The endpoint route that was called"},content:{type:"object",properties:{total:{type:"object",properties:{tokens:{type:"number",example:5463669},items:{type:"object"}}},address_list:{type:"object",example:{d6fa779a3de8b216c56375018375e490c7e2ce92918abce4caecf73b1f77c38f:[{out_point:{t_hash:"g9182e1e2a55b0ef36f1183602d74e63",n:0},value:{Token:5463669}}]}}}}},title:"ResponseFetchBalance"}}}},400:{description:"Invalid input",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:null},status:{type:"string",example:"Error"},reason:{type:"string",example:"Bad Request"},route:{type:"string",example:null},content:{type:"string",example:null}},title:"ResponseBadRequest"}}}}},method:"post",path:"/fetch_balance",servers:[{url:"http://37.27.23.104:3003",description:"Testnet Mempool Node"}],jsonRequestBodyExample:["d6fa779a3de8b216c56375018375e490c7e2ce92918abce4caecf73b1f77c38f"],info:{title:"Mempool API",description:"\u26a0\ufe0f **Some sections may still be incomplete. We higly recommend getting started by downloading our [Postman collection](/docs/postman-collections)**.\n\nThe Mempool node is a special type of node responsible for collecting transactions and bundling them into new blocks. \nThey also partition the mining network for mining and validate the blocks that these partitions mine. \nThere are only a limited number of Mempool nodes.  ",contact:{email:"byron.houwens@a-block.ch"},license:{name:"GPL-3.0",url:"https://www.gnu.org/licenses/gpl-3.0.en.html"},version:"1.0.1"},postman:{name:"fetch_balance",description:{content:"Fetches the balance/s for 1 or more addresses.",type:"text/plain"},url:{path:["fetch_balance"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{disabled:!1,description:{content:"(Required) An idempotent key for retrieving cached responses from the node",type:"text/plain"},key:"x-cache-id",value:""},{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"docs/api/mempool/mempool-api",custom_edit_url:null,hide_send_button:!0},h=void 0,y={unversionedId:"api/mempool/fetch-balance",id:"api/mempool/fetch-balance",title:"fetch_balance",description:"Fetches the balance/s for 1 or more addresses.",source:"@site/docs/api/mempool/fetch-balance.api.mdx",sourceDirName:"api/mempool",slug:"/api/mempool/fetch-balance",permalink:"/docs/api/mempool/fetch-balance",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"fetch-balance",title:"fetch_balance",description:"Fetches the balance/s for 1 or more addresses.",sidebar_label:"fetch_balance",hide_title:!0,hide_table_of_contents:!0,api:{tags:["address"],description:"Fetches the balance/s for 1 or more addresses.",operationId:"fetchBalance",parameters:[{in:"header",name:"x-cache-id",required:!0,description:"An idempotent key for retrieving cached responses from the node",schema:{type:"string",example:"4d1e5754af0931a15138445c3ecd1a82",pattern:"^[a-z0-9]{32}$"}}],requestBody:{description:"List of addresses to fetch the balance from.",content:{"application/json":{schema:{type:"array",description:"list of addresses to fetch from",items:{type:"string",example:"d6fa779a3de8b216c56375018375e490c7e2ce92918abce4caecf73b1f77c38f"},title:"FetchBalance"}}},required:!0},responses:{200:{description:"Successful operation",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:"45v340cd2f8c4782a5b058832565afb1",description:"The ID of the call, which corresponds to the x-cache-id used in the header"},status:{type:"string",example:"Success",description:'The status of the call, which will be one of either "Success", "Error", or "Pending"'},reason:{type:"string",example:"Balance successfully fetched",description:"The reason for the status of the call. Most useful to debug errors"},route:{type:"string",example:"fetch_balance",description:"The endpoint route that was called"},content:{type:"object",properties:{total:{type:"object",properties:{tokens:{type:"number",example:5463669},items:{type:"object"}}},address_list:{type:"object",example:{d6fa779a3de8b216c56375018375e490c7e2ce92918abce4caecf73b1f77c38f:[{out_point:{t_hash:"g9182e1e2a55b0ef36f1183602d74e63",n:0},value:{Token:5463669}}]}}}}},title:"ResponseFetchBalance"}}}},400:{description:"Invalid input",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:null},status:{type:"string",example:"Error"},reason:{type:"string",example:"Bad Request"},route:{type:"string",example:null},content:{type:"string",example:null}},title:"ResponseBadRequest"}}}}},method:"post",path:"/fetch_balance",servers:[{url:"http://37.27.23.104:3003",description:"Testnet Mempool Node"}],jsonRequestBodyExample:["d6fa779a3de8b216c56375018375e490c7e2ce92918abce4caecf73b1f77c38f"],info:{title:"Mempool API",description:"\u26a0\ufe0f **Some sections may still be incomplete. We higly recommend getting started by downloading our [Postman collection](/docs/postman-collections)**.\n\nThe Mempool node is a special type of node responsible for collecting transactions and bundling them into new blocks. \nThey also partition the mining network for mining and validate the blocks that these partitions mine. \nThere are only a limited number of Mempool nodes.  ",contact:{email:"byron.houwens@a-block.ch"},license:{name:"GPL-3.0",url:"https://www.gnu.org/licenses/gpl-3.0.en.html"},version:"1.0.1"},postman:{name:"fetch_balance",description:{content:"Fetches the balance/s for 1 or more addresses.",type:"text/plain"},url:{path:["fetch_balance"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{disabled:!1,description:{content:"(Required) An idempotent key for retrieving cached responses from the node",type:"text/plain"},key:"x-cache-id",value:""},{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"post api-method",info_path:"docs/api/mempool/mempool-api",custom_edit_url:null,hide_send_button:!0},sidebar:"apiSidebar",previous:{title:"address",permalink:"/docs/api/mempool/address"},next:{title:"Introduction",permalink:"/docs/api/storage/storage-api"}},u={},g=[{value:"fetch_balance",id:"fetch_balance",level:2}],f={toc:g},b="wrapper";function x(e){let{components:t,...a}=e;return(0,n.yg)(b,(0,s.A)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"fetch_balance"},"fetch_balance"),(0,n.yg)("p",null,"Fetches the balance/s for 1 or more addresses."),(0,n.yg)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,n.yg)("summary",{style:{}},(0,n.yg)("strong",null,"Header Parameters")),(0,n.yg)("div",null,(0,n.yg)("ul",null,(0,n.yg)(i.A,{className:"paramsItem",param:{in:"header",name:"x-cache-id",required:!0,description:"An idempotent key for retrieving cached responses from the node",schema:{type:"string",example:"4d1e5754af0931a15138445c3ecd1a82",pattern:"^[a-z0-9]{32}$"}},mdxType:"ParamsItem"})))),(0,n.yg)(l.A,{mdxType:"MimeTabs"},(0,n.yg)(m.A,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,n.yg)("details",{style:{},"data-collapsed":!1,open:!0},(0,n.yg)("summary",{style:{textAlign:"left"}},(0,n.yg)("strong",null,"Request Body"),(0,n.yg)("span",{style:{opacity:"0.6"}}," array"),(0,n.yg)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,n.yg)("div",{style:{textAlign:"left",marginLeft:"1rem"}},(0,n.yg)("div",{style:{marginTop:"1rem",marginBottom:"1rem"}},(0,n.yg)("p",null,"List of addresses to fetch the balance from."))),(0,n.yg)("ul",{style:{marginLeft:"1rem"}},(0,n.yg)("li",null,(0,n.yg)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,n.yg)("div",{style:{marginTop:".5rem",marginBottom:".5rem",marginLeft:"1rem"}},(0,n.yg)("p",null,"string")),(0,n.yg)("li",null,(0,n.yg)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))),(0,n.yg)("div",null,(0,n.yg)(o.A,{mdxType:"ApiTabs"},(0,n.yg)(m.A,{label:"200",value:"200",mdxType:"TabItem"},(0,n.yg)("div",null,(0,n.yg)("p",null,"Successful operation")),(0,n.yg)("div",null,(0,n.yg)(l.A,{schemaType:"response",mdxType:"MimeTabs"},(0,n.yg)(m.A,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,n.yg)(p.A,{mdxType:"SchemaTabs"},(0,n.yg)(m.A,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,n.yg)("details",{style:{},"data-collapsed":!1,open:!0},(0,n.yg)("summary",{style:{textAlign:"left"}},(0,n.yg)("strong",null,"Schema")),(0,n.yg)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,n.yg)("ul",{style:{marginLeft:"1rem"}},(0,n.yg)(r.A,{collapsible:!1,name:"id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"45v340cd2f8c4782a5b058832565afb1",description:"The ID of the call, which corresponds to the x-cache-id used in the header"},mdxType:"SchemaItem"}),(0,n.yg)(r.A,{collapsible:!1,name:"status",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Success",description:'The status of the call, which will be one of either "Success", "Error", or "Pending"'},mdxType:"SchemaItem"}),(0,n.yg)(r.A,{collapsible:!1,name:"reason",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Balance successfully fetched",description:"The reason for the status of the call. Most useful to debug errors"},mdxType:"SchemaItem"}),(0,n.yg)(r.A,{collapsible:!1,name:"route",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"fetch_balance",description:"The endpoint route that was called"},mdxType:"SchemaItem"}),(0,n.yg)(r.A,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,n.yg)("details",{style:{}},(0,n.yg)("summary",{style:{}},(0,n.yg)("strong",null,"content"),(0,n.yg)("span",{style:{opacity:"0.6"}}," object")),(0,n.yg)("div",{style:{marginLeft:"1rem"}},(0,n.yg)(r.A,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,n.yg)("details",{style:{}},(0,n.yg)("summary",{style:{}},(0,n.yg)("strong",null,"total"),(0,n.yg)("span",{style:{opacity:"0.6"}}," object")),(0,n.yg)("div",{style:{marginLeft:"1rem"}},(0,n.yg)(r.A,{collapsible:!1,name:"tokens",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number",example:5463669},mdxType:"SchemaItem"}),(0,n.yg)(r.A,{collapsible:!1,name:"items",required:!1,schemaName:"object",qualifierMessage:void 0,schema:{type:"object"},mdxType:"SchemaItem"})))),(0,n.yg)(r.A,{collapsible:!1,name:"address_list",required:!1,schemaName:"object",qualifierMessage:void 0,schema:{type:"object",example:{d6fa779a3de8b216c56375018375e490c7e2ce92918abce4caecf73b1f77c38f:[{out_point:{t_hash:"g9182e1e2a55b0ef36f1183602d74e63",n:0},value:{Token:5463669}}]}},mdxType:"SchemaItem"}))))))),(0,n.yg)(m.A,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,n.yg)(c.A,{responseExample:'{\n  "id": "45v340cd2f8c4782a5b058832565afb1",\n  "status": "Success",\n  "reason": "Balance successfully fetched",\n  "route": "fetch_balance",\n  "content": {\n    "total": {\n      "tokens": 5463669,\n      "items": {}\n    },\n    "address_list": {\n      "d6fa779a3de8b216c56375018375e490c7e2ce92918abce4caecf73b1f77c38f": [\n        {\n          "out_point": {\n            "t_hash": "g9182e1e2a55b0ef36f1183602d74e63",\n            "n": 0\n          },\n          "value": {\n            "Token": 5463669\n          }\n        }\n      ]\n    }\n  }\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,n.yg)(m.A,{label:"400",value:"400",mdxType:"TabItem"},(0,n.yg)("div",null,(0,n.yg)("p",null,"Invalid input")),(0,n.yg)("div",null,(0,n.yg)(l.A,{schemaType:"response",mdxType:"MimeTabs"},(0,n.yg)(m.A,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,n.yg)(p.A,{mdxType:"SchemaTabs"},(0,n.yg)(m.A,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,n.yg)("details",{style:{},"data-collapsed":!1,open:!0},(0,n.yg)("summary",{style:{textAlign:"left"}},(0,n.yg)("strong",null,"Schema")),(0,n.yg)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,n.yg)("ul",{style:{marginLeft:"1rem"}},(0,n.yg)(r.A,{collapsible:!1,name:"id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:null},mdxType:"SchemaItem"}),(0,n.yg)(r.A,{collapsible:!1,name:"status",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Error"},mdxType:"SchemaItem"}),(0,n.yg)(r.A,{collapsible:!1,name:"reason",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Bad Request"},mdxType:"SchemaItem"}),(0,n.yg)(r.A,{collapsible:!1,name:"route",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:null},mdxType:"SchemaItem"}),(0,n.yg)(r.A,{collapsible:!1,name:"content",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:null},mdxType:"SchemaItem"})))),(0,n.yg)(m.A,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,n.yg)(c.A,{responseExample:'{\n  "id": null,\n  "status": "Error",\n  "reason": "Bad Request",\n  "route": null,\n  "content": null\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}x.isMDXComponent=!0}}]);