"use strict";(self.webpackChunkaiblock_dev=self.webpackChunkaiblock_dev||[]).push([[6562],{92694:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>h,default:()=>_,frontMatter:()=>m,metadata:()=>y,toc:()=>b});var s=a(58168),o=(a(96540),a(15680)),n=a(54754),i=a(34366),r=a(13185),l=a(26612),c=a(30774),d=a(47335),p=(a(38454),a(19365));const m={id:"latest-block",title:"latest_block",description:"Get the latest block successfully mined and stored on this Storage node.",sidebar_label:"latest_block",hide_title:!0,hide_table_of_contents:!0,api:{tags:["block"],description:"Get the latest block successfully mined and stored on this Storage node.",operationId:"latestBlock",parameters:[{in:"header",name:"x-cache-id",required:!0,description:"An idempotent key for retrieving cached responses from the node",schema:{type:"string",example:"afac3a3dd8a04538934db1c20cc29767",pattern:"^[a-z0-9]{32}$"}}],responses:{200:{description:"Successful operation",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:"45v340cd2f8c4782a5b058832565afb1",description:"The ID of the call, which corresponds to the x-cache-id used in the header"},status:{type:"string",example:"Success",description:'The status of the call, which will be one of either "Success", "Error", or "Pending"'},reason:{type:"string",example:"Transaction/s successfully created",description:"The reason for the status of the call. Most useful to debug errors"},route:{type:"string",example:"create_transactions",description:"The endpoint route that was called"},content:{type:"object",description:"The block itself. The header contains specific info about the block, while the transactions are stored as a separate property.",properties:{block:{type:"object",properties:{header:{type:"object",properties:{version:{type:"number"},bits:{type:"number"},b_num:{description:"The block number",type:"number"},seed_value:{type:"array",description:"The UNiCORN random number value, which is composed of both the UNiCORN witness and seed value for verification. The example array in this documentation is truncated for brevity.",items:{example:[56,53,48,57,52,57,50]}},nonce_and_mining_tx_hash:{type:"array",items:{example:[[168,23,49,67,25,109],"g130489f617edf5792163c2d4d72568a"]}},previous_hash:{type:"string",example:"b0004...7c383"},txs_merkle_root_and_hash:{type:"array",items:{example:["","48dda...ee9df"]}}}},transactions:{type:"array",description:"A list of hashes for all transactions in this block",items:{example:["g130489f617edf5792163c2d4d72568a"]}}}}}}},title:"ResponseLatestBlock"}}}}},method:"get",path:"/latest_block",servers:[{url:"http://37.27.23.104:3001",description:"Testnet Storage Node"}],info:{title:"Storage API",description:"\u26a0\ufe0f **Some sections may still be incomplete. We higly recommend getting started by downloading our [Postman collection](/docs/postman-collections)**.\n\nThe Storage node is responsible for storing the full blockchain history. \nOnce blocks are mined by the miners and sent to the Mempool nodes for validation, they are pushed on to the Storage nodes for long-term storage. \nAnybody is allowed to request a full history of the blockchain from the Storage nodes, but they are not required to keep such a history to participate in the network.",contact:{email:"byron.houwens@a-block.net"},license:{name:"GPL-3.0",url:"https://www.gnu.org/licenses/gpl-3.0.en.html"},version:"1.0.1"},postman:{name:"latest_block",description:{content:"Get the latest block successfully mined and stored on this Storage node.",type:"text/plain"},url:{path:["latest_block"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{disabled:!1,description:{content:"(Required) An idempotent key for retrieving cached responses from the node",type:"text/plain"},key:"x-cache-id",value:""},{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/api/storage/storage-api",custom_edit_url:null,hide_send_button:!0},h=void 0,y={unversionedId:"api/storage/latest-block",id:"api/storage/latest-block",title:"latest_block",description:"Get the latest block successfully mined and stored on this Storage node.",source:"@site/docs/api/storage/latest-block.api.mdx",sourceDirName:"api/storage",slug:"/api/storage/latest-block",permalink:"/docs/api/storage/latest-block",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"latest-block",title:"latest_block",description:"Get the latest block successfully mined and stored on this Storage node.",sidebar_label:"latest_block",hide_title:!0,hide_table_of_contents:!0,api:{tags:["block"],description:"Get the latest block successfully mined and stored on this Storage node.",operationId:"latestBlock",parameters:[{in:"header",name:"x-cache-id",required:!0,description:"An idempotent key for retrieving cached responses from the node",schema:{type:"string",example:"afac3a3dd8a04538934db1c20cc29767",pattern:"^[a-z0-9]{32}$"}}],responses:{200:{description:"Successful operation",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",example:"45v340cd2f8c4782a5b058832565afb1",description:"The ID of the call, which corresponds to the x-cache-id used in the header"},status:{type:"string",example:"Success",description:'The status of the call, which will be one of either "Success", "Error", or "Pending"'},reason:{type:"string",example:"Transaction/s successfully created",description:"The reason for the status of the call. Most useful to debug errors"},route:{type:"string",example:"create_transactions",description:"The endpoint route that was called"},content:{type:"object",description:"The block itself. The header contains specific info about the block, while the transactions are stored as a separate property.",properties:{block:{type:"object",properties:{header:{type:"object",properties:{version:{type:"number"},bits:{type:"number"},b_num:{description:"The block number",type:"number"},seed_value:{type:"array",description:"The UNiCORN random number value, which is composed of both the UNiCORN witness and seed value for verification. The example array in this documentation is truncated for brevity.",items:{example:[56,53,48,57,52,57,50]}},nonce_and_mining_tx_hash:{type:"array",items:{example:[[168,23,49,67,25,109],"g130489f617edf5792163c2d4d72568a"]}},previous_hash:{type:"string",example:"b0004...7c383"},txs_merkle_root_and_hash:{type:"array",items:{example:["","48dda...ee9df"]}}}},transactions:{type:"array",description:"A list of hashes for all transactions in this block",items:{example:["g130489f617edf5792163c2d4d72568a"]}}}}}}},title:"ResponseLatestBlock"}}}}},method:"get",path:"/latest_block",servers:[{url:"http://37.27.23.104:3001",description:"Testnet Storage Node"}],info:{title:"Storage API",description:"\u26a0\ufe0f **Some sections may still be incomplete. We higly recommend getting started by downloading our [Postman collection](/docs/postman-collections)**.\n\nThe Storage node is responsible for storing the full blockchain history. \nOnce blocks are mined by the miners and sent to the Mempool nodes for validation, they are pushed on to the Storage nodes for long-term storage. \nAnybody is allowed to request a full history of the blockchain from the Storage nodes, but they are not required to keep such a history to participate in the network.",contact:{email:"byron.houwens@a-block.net"},license:{name:"GPL-3.0",url:"https://www.gnu.org/licenses/gpl-3.0.en.html"},version:"1.0.1"},postman:{name:"latest_block",description:{content:"Get the latest block successfully mined and stored on this Storage node.",type:"text/plain"},url:{path:["latest_block"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{disabled:!1,description:{content:"(Required) An idempotent key for retrieving cached responses from the node",type:"text/plain"},key:"x-cache-id",value:""},{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/api/storage/storage-api",custom_edit_url:null,hide_send_button:!0},sidebar:"apiSidebar",previous:{title:"block",permalink:"/docs/api/storage/block"},next:{title:"block_by_num",permalink:"/docs/api/storage/block-by-num"}},u={},b=[{value:"latest_block",id:"latest_block",level:2}],g={toc:b},f="wrapper";function _(e){let{components:t,...a}=e;return(0,o.yg)(f,(0,s.A)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"latest_block"},"latest_block"),(0,o.yg)("p",null,"Get the latest block successfully mined and stored on this Storage node."),(0,o.yg)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,o.yg)("summary",{style:{}},(0,o.yg)("strong",null,"Header Parameters")),(0,o.yg)("div",null,(0,o.yg)("ul",null,(0,o.yg)(r.A,{className:"paramsItem",param:{in:"header",name:"x-cache-id",required:!0,description:"An idempotent key for retrieving cached responses from the node",schema:{type:"string",example:"afac3a3dd8a04538934db1c20cc29767",pattern:"^[a-z0-9]{32}$"}},mdxType:"ParamsItem"})))),(0,o.yg)("div",null,(0,o.yg)(n.A,{mdxType:"ApiTabs"},(0,o.yg)(p.A,{label:"200",value:"200",mdxType:"TabItem"},(0,o.yg)("div",null,(0,o.yg)("p",null,"Successful operation")),(0,o.yg)("div",null,(0,o.yg)(i.A,{schemaType:"response",mdxType:"MimeTabs"},(0,o.yg)(p.A,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,o.yg)(d.A,{mdxType:"SchemaTabs"},(0,o.yg)(p.A,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,o.yg)("details",{style:{},"data-collapsed":!1,open:!0},(0,o.yg)("summary",{style:{textAlign:"left"}},(0,o.yg)("strong",null,"Schema")),(0,o.yg)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,o.yg)("ul",{style:{marginLeft:"1rem"}},(0,o.yg)(c.A,{collapsible:!1,name:"id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"45v340cd2f8c4782a5b058832565afb1",description:"The ID of the call, which corresponds to the x-cache-id used in the header"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"status",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Success",description:'The status of the call, which will be one of either "Success", "Error", or "Pending"'},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"reason",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"Transaction/s successfully created",description:"The reason for the status of the call. Most useful to debug errors"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"route",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"create_transactions",description:"The endpoint route that was called"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,o.yg)("details",{style:{}},(0,o.yg)("summary",{style:{}},(0,o.yg)("strong",null,"content"),(0,o.yg)("span",{style:{opacity:"0.6"}}," object")),(0,o.yg)("div",{style:{marginLeft:"1rem"}},(0,o.yg)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,o.yg)("p",null,"The block itself. The header contains specific info about the block, while the transactions are stored as a separate property.")),(0,o.yg)(c.A,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,o.yg)("details",{style:{}},(0,o.yg)("summary",{style:{}},(0,o.yg)("strong",null,"block"),(0,o.yg)("span",{style:{opacity:"0.6"}}," object")),(0,o.yg)("div",{style:{marginLeft:"1rem"}},(0,o.yg)(c.A,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,o.yg)("details",{style:{}},(0,o.yg)("summary",{style:{}},(0,o.yg)("strong",null,"header"),(0,o.yg)("span",{style:{opacity:"0.6"}}," object")),(0,o.yg)("div",{style:{marginLeft:"1rem"}},(0,o.yg)(c.A,{collapsible:!1,name:"version",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"bits",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{type:"number"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"b_num",required:!1,schemaName:"number",qualifierMessage:void 0,schema:{description:"The block number",type:"number"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"seed_value",required:!1,schemaName:"undefined[]",qualifierMessage:void 0,schema:{type:"array",description:"The UNiCORN random number value, which is composed of both the UNiCORN witness and seed value for verification. The example array in this documentation is truncated for brevity.",items:{example:[56,53,48,57,52,57,50]}},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"nonce_and_mining_tx_hash",required:!1,schemaName:"undefined[]",qualifierMessage:void 0,schema:{type:"array",items:{example:[[168,23,49,67,25,109],"g130489f617edf5792163c2d4d72568a"]}},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"previous_hash",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"b0004...7c383"},mdxType:"SchemaItem"}),(0,o.yg)(c.A,{collapsible:!1,name:"txs_merkle_root_and_hash",required:!1,schemaName:"undefined[]",qualifierMessage:void 0,schema:{type:"array",items:{example:["","48dda...ee9df"]}},mdxType:"SchemaItem"})))),(0,o.yg)(c.A,{collapsible:!1,name:"transactions",required:!1,schemaName:"undefined[]",qualifierMessage:void 0,schema:{type:"array",description:"A list of hashes for all transactions in this block",items:{example:["g130489f617edf5792163c2d4d72568a"]}},mdxType:"SchemaItem"})))))))))),(0,o.yg)(p.A,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,o.yg)(l.A,{responseExample:'{\n  "id": "45v340cd2f8c4782a5b058832565afb1",\n  "status": "Success",\n  "reason": "Transaction/s successfully created",\n  "route": "create_transactions",\n  "content": {\n    "block": {\n      "header": {\n        "version": 0,\n        "bits": 0,\n        "b_num": 0,\n        "seed_value": [\n          [\n            56,\n            53,\n            48,\n            57,\n            52,\n            57,\n            50\n          ]\n        ],\n        "nonce_and_mining_tx_hash": [\n          [\n            [\n              168,\n              23,\n              49,\n              67,\n              25,\n              109\n            ],\n            "g130489f617edf5792163c2d4d72568a"\n          ]\n        ],\n        "previous_hash": "b0004...7c383",\n        "txs_merkle_root_and_hash": [\n          [\n            "",\n            "48dda...ee9df"\n          ]\n        ]\n      },\n      "transactions": [\n        [\n          "g130489f617edf5792163c2d4d72568a"\n        ]\n      ]\n    }\n  }\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}_.isMDXComponent=!0}}]);