"use strict";(self.webpackChunkaiblock_dev=self.webpackChunkaiblock_dev||[]).push([[1520],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>u});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,u=d["".concat(l,".").concat(m)]||d[m]||y[m]||o;return t?a.createElement(u,s(s({ref:n},p),{},{components:t})):a.createElement(u,s({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},58386:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(58168),r=(t(96540),t(15680));const o={title:"Send and Receive Payments",description:"Sending and receiving payments through A-Block.js is quick and simple",sidebar_label:"Send and Receive Payments",sidebar_position:1,hide_title:!0,tags:["A-Block.js","getting started","payments"]},s="Send and Receive Payments",i={unversionedId:"ablockjs-tutorials/send-and-receive",id:"ablockjs-tutorials/send-and-receive",title:"Send and Receive Payments",description:"Sending and receiving payments through A-Block.js is quick and simple",source:"@site/docs/ablockjs-tutorials/send-and-receive.mdx",sourceDirName:"ablockjs-tutorials",slug:"/ablockjs-tutorials/send-and-receive",permalink:"/docs/ablockjs-tutorials/send-and-receive",draft:!1,tags:[{label:"A-Block.js",permalink:"/docs/tags/a-block-js"},{label:"getting started",permalink:"/docs/tags/getting-started"},{label:"payments",permalink:"/docs/tags/payments"}],version:"current",sidebarPosition:1,frontMatter:{title:"Send and Receive Payments",description:"Sending and receiving payments through A-Block.js is quick and simple",sidebar_label:"Send and Receive Payments",sidebar_position:1,hide_title:!0,tags:["A-Block.js","getting started","payments"]},sidebar:"docsSidebar",previous:{title:"Get Started",permalink:"/docs/ablockjs-tutorials/get-started"},next:{title:"2-Way Payments",permalink:"/docs/ablockjs-tutorials/two-way-payments"}},l={},c=[{value:"Sending a Payment",id:"sending-a-payment",level:2},{value:"Receiving a Payment",id:"receiving-a-payment",level:2}],p={toc:c},d="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"send-and-receive-payments"},"Send and Receive Payments"),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Need ",(0,r.yg)("strong",{parentName:"p"},"testnet tokens"),"? Contact us on ",(0,r.yg)("a",{parentName:"p",href:"https://discord.gg/dDgabkJMEG"},(0,r.yg)("strong",{parentName:"a"},"AIBlock discord"))," and we will sort you out \ud83d\ude0e")),(0,r.yg)("p",null,"After setting up a wallet, you can send and receive payments very easily through the A-Block.js SDK. If you're developing\nthis in a test environment, you can create 2 new keypairs. We'll use address 1 as our sender (Alice) and address 2 as our receiver (Bob)."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"import { ABlockWallet } from '@ablock/a-blockjs';\n\nconst wallet = new ABlockWallet();\n\n// ... Initialize the wallet correctly\n\n// ALICE ADDRESS\n\nconst aliceKeypairResult = wallet.getNewKeypair([]);\nconst aliceKeypair: IKeypairEncrypted = newKeypairResult.content.newKeypairResponse;\nconst aliceAddress = newKeypair.address;\n\n// BOB ADDRESS\n\nconst bobKeypairResult = wallet.getNewKeypair([]);\nconst bobKeypair: IKeypairEncrypted = newKeypairResult.content.newKeypairResponse;\nconst bobAddress = newKeypair.address;\n")),(0,r.yg)("p",null,"With these addresses available, we can now send and receive payments."),(0,r.yg)("br",null),(0,r.yg)("h2",{id:"sending-a-payment"},"Sending a Payment"),(0,r.yg)("p",null,"The wallet provides a ",(0,r.yg)("inlineCode",{parentName:"p"},"makeTokenPayment")," method, which simplifies the entire token payment process. This method does all the transaction construction for you, but importantly ",(0,r.yg)("strong",{parentName:"p"},"it does not check the validity of the payment address"),", so\nas the developer you'll need to make sure your application verifies that Bob's address is in fact valid. Otherwise we can make the payment simply:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const paymentResult = await wallet.makeTokenPayment({\n   bobAddress,      // Address to pay (in this case we want to pay Bob)\n   10,              // Payment amount\n   [aliceKeypair],  // An array of keypairs to pay from\n   aliceKeypair    // Where the change of your payment should go to\n});\n")),(0,r.yg)("p",null,"For this example we're assuming that Alice has ",(0,r.yg)("inlineCode",{parentName:"p"},"10")," tokens to pay Bob. It's also important to note that the ",(0,r.yg)("inlineCode",{parentName:"p"},"makeTokenPayment")," method is async, since it's making a call to the blockchain in order to effect the payment. That means\nyou'll need to ",(0,r.yg)("inlineCode",{parentName:"p"},"await")," the result, or handle it asynchronously."),(0,r.yg)("br",null),(0,r.yg)("h2",{id:"receiving-a-payment"},"Receiving a Payment"),(0,r.yg)("p",null,"The balance of Bob's address can then be checked on the UTXO, after a sufficient amount of time for the payment to go through on the chain"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const bobBalanceCall = await wallet.fetchBalance([bobAddress]);\nconst bobBalance = bobBalanceCall.content.fetchBalanceResponse;\n")),(0,r.yg)("p",null,"The response structure for ",(0,r.yg)("inlineCode",{parentName:"p"},"bobBalance")," will then be something like the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "total": {\n        "tokens": 10,\n        "items": {}\n    },\n    "address_list": {\n        "a0b08...c02e5": [\n            {\n                "out_point": {\n                    "t_hash": "g3b13...3353f",\n                    "n": 0\n                },\n                "value": {\n                    "Token": 10\n                }\n            },\n        ]\n    }\n}\n')),(0,r.yg)("p",null,"That's it! A-Block.js has been designed to make sending and receiving payments as quick and easy as possible. Next, we'll take a look at how to make atomic, 2-way payments."))}y.isMDXComponent=!0}}]);